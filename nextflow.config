params {
  outdir = 'scsajr_out'
  SAMPLEFILE = ""
  BARCODEFILE = ""
  bam_on_irods = false
  use_bam_dedupl = false
  ref = "${projectDir}/ref/human_2020A_chr"
  // pseudobulk filtering parameters
  mincells = 30
  minsamples = 2
  // pseudobulking and postprocessing
  ncores = 4
  // for re-pseudobulking
  preprocessed_rds = ''
  // for reference generation
  gtf = ''
}

singularity {
  enabled = true
  autoMounts = true
  runOptions = '-B /lustre,/nfs --home /tmp/snare_tmp'
  pullTimeout = '100m'
}

executor {
  name = 'lsf'
  perJobMemLimit = true
}

process {
  container = 'quay.io/cellgeni/scsajr:v25-189'
  errorStrategy = 'retry'

  maxRetries = { task.exitStatus in 130..140 ? 3 : 1 }

  withName: make_ref {
    cpus = 1
    memory = 20.GB
    queue = 'normal'
  }

  withName: postprocess {
    cpus = 10
    queue = 'normal'
    memory = { 20.GB + 500.MB * task.attempt * n_samples }
  }


  withName: get_data {
    cpus = 1
    memory = 2.GB
    queue = 'normal'
    container = ''
  }

  withName: make_chr_list {
    executor = 'local'
    container = ''
  }

  withName: run_sajr_per_chr {
    cpus = 1
    queue = 'normal'
    memory = { 5.GB + 5.GB * task.attempt }
  }

  withName: determine_strand {
    cpus = 2
    queue = 'normal'
    memory = { 5.GB + 5.GB * task.attempt }
  }

  withLabel: pseudobulk {
    cpus = params.ncores
    memory = { 10.GB + n_samples * 300.MB + 150.MB * task.attempt * n_samples }
    queue = 'normal'
  }

  withName: generate_summary {
    cpus = 1
    memory = { 5.GB + 5.GB * task.attempt }
    queue = 'normal'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Capturing Nextflow log files into a reports directory
timeline {
  enabled = true
  file = "${params.outdir}/nextflow-reports/timeline.html"
  overwrite = true
}

report {
  enabled = true
  file = "${params.outdir}/nextflow-reports/report.html"
  overwrite = true
}

trace {
  enabled = true
  file = "${params.outdir}/nextflow-reports/trace.txt"
  overwrite = true
}

// Ensures work directories and removed when pipeline completes
cleanup = false
